subtitle = "Measuring impact from speaking engagements",
x = "Date",
y = "Download Count",
caption = "Source: @jasdumas") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %Y")
# Transform and visualize data
c %>% slice(73:nrow(c)) %>% # shinyLP was not available until 9/13/17
filter(package == 'ttbbeer') %>%
ggplot(., aes(x = date, y = count, label = important_days)) +
#geom_point() +
geom_line() +
geom_smooth() +
scale_y_log10() +
geom_label_repel(na.rm = T, nudge_y = 10, nudge_x = -6,  segment.color = "darkred",
arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
theme_minimal() +
theme(legend.position="none", axis.text.x=element_text(angle=60, hjust=1) ) +
labs(title = "Daily ttbbeer R package downloads from CRAN",
subtitle = "Measuring impact from speaking engagements",
x = "Date",
y = "Download Count",
caption = "Source: @jasdumas") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %Y")
install.packages("prophet")
library(prophet)
c %>% slice(73:nrow(c)) %>% # shinyLP was not available until 9/13/17
ggplot(., aes(x = date, y = count, color = package, label = important_days)) +
geom_point() +
geom_line() +
geom_smooth() +
scale_y_log10() +
geom_label_repel(na.rm = T, segment.color = "darkred",
arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
theme_minimal() +
theme(legend.position="none") +
labs(title = "Daily shinyLP & ttbbeer R package downloads from CRAN",
subtitle = "Measuring impact from speaking engagements",
x = "Date",
y = "Download Count",
caption = "Source: @jasdumas") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %Y") +
facet_wrap(~ package, nrow=2, scales = "free")
c %>% slice(73:nrow(c)) %>% # shinyLP was not available until 9/13/17
ggplot(., aes(x = date, y = count, color = package, label = important_days)) +
geom_point() +
geom_line() +
geom_smooth() +
scale_y_log10() +
geom_label_repel(na.rm = T, nudge_y = 5, segment.color = "darkred",
arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
theme_minimal() +
theme(legend.position="none") +
labs(title = "Daily shinyLP & ttbbeer R package downloads from CRAN",
subtitle = "Measuring impact from speaking engagements",
x = "Date",
y = "Download Count",
caption = "Source: @jasdumas") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %Y") +
facet_wrap(~ package, nrow=2, scales = "free")
c %>% slice(73:nrow(c)) %>% # shinyLP was not available until 9/13/17
ggplot(., aes(x = date, y = count, color = package, label = important_days)) +
geom_point() +
geom_line() +
geom_smooth() +
scale_y_log10() +
geom_label_repel(na.rm = T, segment.color = "darkred",
arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
theme_minimal() +
theme(legend.position="none") +
labs(title = "Daily shinyLP & ttbbeer R package downloads from CRAN",
subtitle = "Measuring impact from speaking engagements",
x = "Date",
y = "Download Count",
caption = "Source: @jasdumas") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %Y") +
facet_wrap(~ package, nrow=2, scales = "free")
m <- prophet(c)
m <- c %>% mutate(y = log(count))
m <- prophet(c)
c %>% mutate(y = log(count))
%>%
mutate(y = log(y))
c$y <- log(c$count)
m <- c # make copy
m <- prophet(c)
c$y <- log(c$count)
c$ds <- c$date
m <- c # make copy
m <- prophet(c)
?prophet
m <- prophet(c, na.rm=T)
m <- prophet(c)
c$y <- log(c$count)
c$ds <- c$date
m_ttbbeer <- c %>% filter(package == 'ttbbeer') # make copy
m_shinylp <- c %>% filter(package == 'shinyLP')
m <- prophet(c)
m_ttbbeer <- prophet(c)
c$y <- log(c$count)
c$ds <- c$date
m_ttbbeer <- c %>% filter(package == 'ttbbeer') %>% select(ds, y) # make copy
m_shinylp <- c %>% filter(package == 'shinyLP') %>% select(ds, y)
View(m_shinylp)
c$y <- c$count
c$ds <- c$date
m_ttbbeer <- c %>% filter(package == 'ttbbeer') %>% select(ds, y) # make copy
m_shinylp <- c %>% filter(package == 'shinyLP') %>% select(ds, y)
View(m_shinylp)
m_ttbbeer <- prophet(c)
m_ttbbeer_fit <- prophet(m_ttbbeer)
c$y <- c$count
c$ds <- c$date
m_ttbbeer <- c %>% filter(package == 'ttbbeer') %>% select(ds, y) # make copy
m_shinylp <- c %>% filter(package == 'shinyLP') %>% select(ds, y)
m_ttbbeer_fit <- prophet(m_ttbbeer)
m_shinylp_fit <- prophet(m_shinylp)
future_ttbbeer <- make_future_dataframe(m_ttbbeer_fit, periods = 365)
tail(future_ttbbeer)
tail(future_ttbbeer)
View(future_ttbbeer)
future_ttbbeer <- make_future_dataframe(m_ttbbeer_fit, periods = 365)
tail(future_ttbbeer)
# Transform and visualize data
c %>% slice(73:nrow(c)) %>% # shinyLP was not available until 9/13/17
filter(package == 'ttbbeer') %>%
ggplot(., aes(x = date, y = count, label = important_days)) +
#geom_point() +
geom_line() +
geom_smooth() +
scale_y_log10() +
geom_label_repel(na.rm = T, nudge_y = 10, nudge_x = -6,  segment.color = "darkred",
arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
theme_minimal() +
theme(legend.position="none", axis.text.x=element_text(angle=60, hjust=1) ) +
labs(title = "Daily ttbbeer R package downloads from CRAN",
subtitle = "Measuring impact from speaking engagements",
x = "Date",
y = "Download Count",
caption = "Source: @jasdumas") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %Y")
c %>% slice(73:nrow(c)) %>% # shinyLP was not available until 9/13/17
filter(package == 'shinyLP') %>%
ggplot(., aes(x = date, y = count, label = important_days)) +
#geom_point() +
geom_line() +
geom_smooth() +
scale_y_log10() +
geom_label_repel(na.rm = T,  nudge_x = -20,  segment.color = "darkred",
arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
theme_minimal() +
theme(legend.position="none",  axis.text.x=element_text(angle=60, hjust=1)) +
labs(title = "Daily shinyLP R package downloads from CRAN",
subtitle = "Measuring impact from speaking engagements",
x = "Date",
y = "Download Count",
caption = "Source: @jasdumas") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %Y")
future_ttbbeer <- make_future_dataframe(m_ttbbeer_fit, periods = 365)
future_shinylp <- make_future_dataframe(m_shinylp_fit, periods = 365)
forecast_ttbbeer <- predict(m_ttbbeer_fit, future_ttbbeer)
tail(forecast_ttbbeer[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
forecast_shinylp <- predict(m_shinylp_fit, future_shinylp)
tail(forecast_shinylp[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
emo::ji('tada')
forecast_shinylp <- predict(m_shinylp_fit, future_shinylp)
tail(forecast_shinylp[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
tail(forecast_shinylp[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m_ttbbeer_fit, forecast_ttbbeer)
plot(m_shinylp_fit, forecast_shinylp, main = "shinyLP 1 year forecast")
prophet_plot_components(m_ttbbeer_fit, forecast_ttbbeer)
prophet_plot_components(m_ttbbeer_fit, forecast_ttbbeer)
prophet_plot_components(m_shinylp_fit, forecast_shinylp)
plot(m_ttbbeer_fit, forecast_ttbbeer)
plot(m_shinylp_fit, forecast_shinylp)
prophet_plot_components(m_ttbbeer_fit, forecast_ttbbeer)
prophet_plot_components(m_shinylp_fit, forecast_shinylp)
install.packages("library(CausalImpact)")
install.packages("CausalImpact")
library(CausalImpact)
df_ttbbeer <-  c %>% filter(package == 'ttbbeer')
df_ttbbeer[which(df_ttbbeer$date == uri_talk)]
df_ttbbeer <-  c %>% filter(package == 'ttbbeer')
df_ttbbeer[which(df_ttbbeer$date == uri_talk),]
df_ttbbeer[which(df_ttbbeer$date == uri_talk),]
df_ttbbeer <-  c %>% filter(package == 'ttbbeer') %>%
select(date, count)
View(df_ttbbeer)
df_ttbbeer <-  c %>% filter(package == 'ttbbeer') %>% select(date, count)
df_ttbbeer <-  c %>% filter(package == 'ttbbeer')
df_ttbbeer <- df_ttbbeer[, c(1, 2)]
df_ttbbeer[which(df_ttbbeer$date == uri_talk),] # pre/post calc
end_period <- nrow(df_ttbbeer)
pre_period = c(1, 271)
post_period = c(272, end_period)
impact <- CausalImpact(df_ttbbeer, pre_period, post_period)
df_ttbbeer$date[1]
df_ttbbeer$date[which(df_ttbbeer$date == uri_talk),]
df_ttbbeer$date[which(df_ttbbeer$date == uri_talk)]
class(df_ttbbeer$date[which(df_ttbbeer$date == uri_talk)])
pre_period = c(df_ttbbeer$date[1], df_ttbbeer$date[which(df_ttbbeer$date == uri_talk)])
df_ttbbeer$date[which(df_ttbbeer$date == uri_talk)]+1
df_ttbbeer$date[which(df_ttbbeer$date == uri_talk)]
tail(df_ttbbeer$date)
tail(df_ttbbeer$date)[6]
class(tail(df_ttbbeer$date)[6])
df_ttbbeer <-  c %>% filter(package == 'ttbbeer')
df_ttbbeer <- df_ttbbeer[, c(1, 2)]
df_ttbbeer$date[which(df_ttbbeer$date == uri_talk),] # pre/post calc
df_ttbbeer <-  c %>% filter(package == 'ttbbeer')
df_ttbbeer <- df_ttbbeer[, c(1, 2)]
#df_ttbbeer$date[which(df_ttbbeer$date == uri_talk),] # pre/post calc
pre_period = c(df_ttbbeer$date[1], df_ttbbeer$date[which(df_ttbbeer$date == uri_talk)])
post_period = c(df_ttbbeer$date[which(df_ttbbeer$date == uri_talk)]+1, tail(df_ttbbeer$date)[6])
impact <- CausalImpact(df_ttbbeer, pre_period, post_period)
plot(impact)
summary(impact, "report")
# run this one just for shinyLP
df_shinylp <-  c %>% filter(package == 'shinyLP')
df_shinylp <- df_shinylp[, c(1, 2)]
pre_period2 = c(df_shinylp$date[1], df_shinylp$date[which(df_shinylp$date == uri_talk)])
post_period2 = c(df_shinylp$date[which(df_shinylp$date == uri_talk)]+1, tail(df_shinylp$date)[6])
impact2 <- CausalImpact(df_shinylp, pre_period2, post_period2)
plot(impact2)
summary(impact2, "report")
# Transform and visualize data
c %>% slice(73:nrow(c)) %>% # shinyLP was not available until 9/13/17
filter(package == 'ttbbeer') %>%
ggplot(., aes(x = date, y = count, label = important_days)) +
#geom_point() +
geom_line() +
geom_smooth() +
scale_y_log10() +
geom_label_repel(na.rm = T, nudge_y = 10, nudge_x = -6,  segment.color = "darkred",
arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
theme_minimal() +
theme(legend.position="none", axis.text.x=element_text(angle=60, hjust=1) ) +
labs(title = "Daily ttbbeer R package downloads from CRAN",
subtitle = "Measuring impact from speaking engagements",
x = "Date",
y = "Download Count",
caption = "Source: @jasdumas") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %Y")
ggplotly()
future_ttbbeer <- make_future_dataframe(m_ttbbeer_fit, periods = 90) # 90 days out
future_shinylp <- make_future_dataframe(m_shinylp_fit, periods = 90)
forecast_ttbbeer <- predict(m_ttbbeer_fit, future_ttbbeer)
tail(forecast_ttbbeer[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
# Transform and visualize data
c %>% slice(73:nrow(c)) %>% # shinyLP was not available until 9/13/17
filter(package == 'ttbbeer') %>%
ggplot(., aes(x = date, y = count, label = important_days)) +
#geom_point() +
geom_line() +
geom_smooth() +
scale_y_log10() +
geom_label_repel(na.rm = T, nudge_y = 10, nudge_x = -6,  segment.color = "darkred",
arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
theme_minimal() +
theme(legend.position="none", axis.text.x=element_text(angle=60, hjust=1) ) +
labs(title = "Daily ttbbeer R package downloads from CRAN",
subtitle = "Measuring impact from speaking engagements",
x = "Date",
y = "Download Count",
caption = "Source: @jasdumas") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %Y")
c %>% slice(73:nrow(c)) %>% # shinyLP was not available until 9/13/17
filter(package == 'shinyLP') %>%
ggplot(., aes(x = date, y = count, label = important_days)) +
#geom_point() +
geom_line() +
geom_smooth() +
scale_y_log10() +
geom_label_repel(na.rm = T,  nudge_x = -20,  segment.color = "darkred",
arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
theme_minimal() +
theme(legend.position="none",  axis.text.x=element_text(angle=60, hjust=1)) +
labs(title = "Daily shinyLP R package downloads from CRAN",
subtitle = "Measuring impact from speaking engagements",
x = "Date",
y = "Download Count",
caption = "Source: @jasdumas") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %Y")
library(prophet)
c$y <- c$count
c$ds <- c$date
m_ttbbeer <- c %>% filter(package == 'ttbbeer') %>% select(ds, y) # make copy
library(prophet)
c$y <- c$count
c$ds <- c$date
m_ttbbeer <- c %>% filter(package == 'ttbbeer') %>% select('ds', 'y') # make copy
View(c)
library(prophet)
c$y <- c$count
c$ds <- c$date
m_ttbbeer <- c %>% filter(package == 'ttbbeer')
m_ttbbeer <- m_ttbbeer[, c(5, 6)]
m_shinylp <- c %>% filter(package == 'shinyLP')
m_shinylp <- m_shinylp[, c(5, 6)]
getwd()
q()
q()
library(emoji)
library(emo)
emo::ji("beer")
emo::ji("headphones")
emo::ji("music")
emo::ji("music-notes")
emo::ji("music")
library(V8)
emo::ji("smile")
library(gramr)
write_good_file("runconf17-experience.Rmd")
blogdown:::new_post_addin()
?blogdown
library(blogdown)
?blogdown
blogdown::new_post("trying this out")
q()
q()
gramr:::write_good_ip()
q()
gramr:::write_good_ip()
q()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(rtweet)
library(stringr)
library(wesanderson)
library(maps)
library(tidytext)
library(dumas) # http://jasdumas.github.io/dumas/
library(wordcloud)
library(magrittr)
untp <- search_tweets(q = "untp.beer",
n = 18000,
include_rts = FALSE,
retryonratelimit = TRUE,
geocode = lookup_coords("usa"),
lang = "en"
)
library(tidyverse)
library(rtweet)
library(stringr)
library(wesanderson)
library(maps)
library(tidytext)
library(dumas) # http://jasdumas.github.io/dumas/
library(wordcloud)
library(magrittr)
library(emo)
emo::ji("nerd")
emo::ji("nerd")
head(untp$text)
n_distinct(untp$user_id)
paste(min(untp$created_at), max(untp$created_at), sep = " to " )
format(min(untp$created_at))
as.Date(min(untp$created_at))
paste(as.Date(min(untp$created_at)), as.Date(max(untp$created_at)), sep = " to " )
count(untp, source)
untp %<>%
mutate(structure_type = case_when (
str_detect(text, "I just earned the") ~ "badge achievement",
str_detect(text, "^Drinking") ~ "default check-in",
str_detect(text, "^Just added") ~ "brewery update",
TRUE ~ "additional review"
))
View(untp)
untp %>%
count(structure_type) %>%
mutate(structure_type = fct_reorder(structure_type, n)) %>%
ggplot(aes(x = structure_type, y = n)) +
geom_bar(stat = "identity", fill = wes_palette("BottleRocket1", 1)) +
theme_minimal() +
labs(title = "Count of Tweet Types for Untappd Twitter Shares",
subtitle = "Most users have shared their badge acheivements", y = "Count of Tweets", x = "")
untp %<>%
mutate(badge_type = str_extract(text, "(?<=').*?(?=')"))
untp %<>%
mutate(badge_type = str_extract(text, "(?<=').*?(?=')"))
untp %>%
count(badge_type) %>%
dplyr::filter(!is.na(badge_type)) %>%
arrange(desc(n)) %>%
top_n(25) %>%
ggplot(aes(x = fct_reorder(badge_type, n), y = n)) +
geom_bar(stat = "identity", fill = wes_palette("GrandBudapest1", 1)) +
theme_minimal() +
coord_flip() +
labs(title = "Count of Badge Types for Untappd Twitter Shares",
subtitle = "Brew Bowl LII was the most awarded badge this weekend", y = "Count of Tweets", x = "")
untp %>%
count(badge_type) %>%
dplyr::filter(!is.na(badge_type)) %>%
arrange(desc(n)) %>%
top_n(25) %>%
ggplot(aes(x = fct_reorder(badge_type, n), y = n)) +
geom_bar(stat = "identity", fill = wes_palette("GrandBudapest1", 1)) +
theme_minimal() +
coord_flip() +
labs(title = "Count of Badge Types for Untappd Twitter Shares",
subtitle = "Brew Bowl LII was the most awarded badge this weekend", y = "Count of Tweets", x = "")
untp %>%
count(place_full_name) %>%
arrange(desc(n)) %>%
top_n(11) %>%
data.frame()
## create lat/lng variables using all available tweet and profile geo-location data
untp <- lat_lng(untp)
## plot state boundaries
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25)
## plot lat and lng points onto state map
with(untp, points(lng, lat, pch = 20, cex = .75, col = wes_palette("Cavalcanti1", 1)))
untp %>%
count(place_full_name) %>%
arrange(desc(n)) %>%
top_n(21) %>%
data.frame()
# mentions_screen_name is the brewery that produced the checked-in beer
untp %>%
unnest(brewery = mentions_screen_name) %>%
count(brewery) %>%
dplyr::filter(brewery != 'untappd') %>%
arrange(desc(n)) %>%
top_n(25) %>%
ggplot(aes(x = fct_reorder(brewery, n), y = n)) +
geom_bar(stat = "identity", fill = wes_palette("Moonrise2", 1)) +
theme_minimal() +
coord_flip() +
labs(title = "Top 25 Breweries for Untappd Twitter Shares",
subtitle = "", y = "Count of Tweets", x = "", caption = "by @handle occurrences")
untp %>%
unnest(hashtags) %>%
count(hashtags) %>%
dplyr::filter(!is.na(hashtags)) %>%
arrange(desc(n)) %>%
top_n(15)
?unnest
## plot time series of tweets
ts_plot(untp, "1 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of Untappd Twitter statuses from the past 2 days",
subtitle = "Twitter status (tweet) counts aggregated using one-hour intervals",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
# the first vector is the review, second is the beer/brewery, third is the url
untp_text <- str_split(untp$text[untp$structure_type == 'additional review'], "-|—")
# unnest these unnamed lists, if they were named I would have used purrr::map_df()
# https://stackoverflow.com/a/24496537/4143444
review <- sapply(untp_text, "[", 1)
beer <- sapply(untp_text, "[", 2)
user <-untp %>%
dplyr::filter(structure_type == 'additional review') %>%
select(starts_with("screen_name"))
untp_text <- data.frame(review, beer, user$screen_name)
untp_text %<>%
mutate(clean_beer = str_replace(beer,"#[a-zA-Z0-9]{1,}", "")) %>%
mutate(clean_beer = str_replace_all(clean_beer, "Drinking a |Drinking an ", "")) %>%
mutate(clean_beer = trimws(str_replace_all(clean_beer, "[[:punct:]]", "")))
untp_text %>%
count(clean_beer) %>%
arrange(desc(n)) %>%
top_n(15) %>%
dplyr::filter(clean_beer %notin% c("DC", "A")) %>%
ggplot(aes(x = fct_reorder(clean_beer, n), y = n)) +
geom_bar(stat = "identity", fill = wes_palette("BottleRocket2", 1)) +
theme_minimal() +
coord_flip() +
labs(title = "Top 15 Beers for Untappd\nTwitter Shares",
subtitle = "", y = "Count of Tweets", x = "")
top_beers <- untp_text %>%
count(clean_beer) %>%
arrange(desc(n)) %>%
top_n(20) %>%
dplyr::filter(clean_beer %notin% c("DC", "A")) %>%
select(clean_beer)
# subset the data into topic (beers) and review (text) for tokenization
untp_text_tiny <- untp_text[, c("clean_beer", "review")]
# need to inner_join top beers with the reviews
merge_untp <- untp_text_tiny %>%
inner_join(top_beers)
# tokenize the reviews and remove some of the specific football words
untp_text_tiny <- merge_untp %>%
mutate(review = as.character(review)) %>%
unnest_tokens(word, review) %>%
dplyr::filter(word %notin% c("super", "superbowl", "superbowlsunday"))
untp_sentiment <- untp_text_tiny %>%
inner_join(get_sentiments("bing")) %>%
count(clean_beer, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
head(untp_sentiment)
ggplot(untp_sentiment, aes(x = clean_beer, y = sentiment, fill = clean_beer)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_minimal() +
labs(x = "")
untp_text_tiny %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100, colors = wes_palette("Zissou1")))
emo::ji("footbal")
emo::ji("football")
emo::ji("football")
q()
